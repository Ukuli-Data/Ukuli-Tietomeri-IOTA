/** @module unit-converter */
import BigNumber from 'bignumber.js';
export declare enum Unit {
    i = "i",
    Ki = "Ki",
    Mi = "Mi",
    Gi = "Gi",
    Ti = "Ti",
    Pi = "Pi"
}
export interface UnitMap {
    readonly [unit: string]: {
        readonly val: BigNumber;
        readonly dp: number;
    };
}
export declare const unitMap: UnitMap;
/**
 * This method converts a value of [IOTA tokens](https://docs.iota.org/docs/getting-started/0.1/clients/token) from a given unit to another given unit.
 *
 * Valid unit names include the following:
 * - `i`: 1
 * - `Ki`: 1,000
 * - `Mi`: 1,000,000
 * - `Gi`: 1,000,000,000
 * - `Ti`: 1,000,000,000,000
 * - `Pi`: 1,000,000,000,000,000
 *
 * @method convertUnits
 *
 * @summary Converts a value of IOTA tokens from one unit to another.
 *
 * @memberof module:unit-converter
 *
 * @param {String | integer | float} value - Number of IOTA tokens
 * @param {String} fromUnit - Unit of the `value` argument
 * @param {String} toUnit - Unit to which to convert the value to
 *
 * @example
 * ```js
 * let newUnit = UnitConverter.convertUnits(100, 'Ti', 'Pi');
 * ```
 *
 * @return {number} newUnit - The number of units of IOTA tokens
 */
export declare const convertUnits: (value: string | number, fromUnit: Unit, toUnit: Unit) => number;
