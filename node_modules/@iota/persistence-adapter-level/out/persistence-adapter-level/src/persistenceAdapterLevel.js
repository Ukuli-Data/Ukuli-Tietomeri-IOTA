"use strict";
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var Promise = require("bluebird");
var level = require("level");
var path = require("path");
var types_1 = require("../../types");
exports.PersistenceBatchTypes = types_1.PersistenceBatchTypes;
exports.createPersistenceAdapter = function (_a) {
    var persistenceID = _a.persistenceID, persistencePath = _a.persistencePath;
    if (typeof persistenceID !== 'string') {
        throw new TypeError('Illegal storeID.');
    }
    if (typeof persistencePath !== 'string') {
        throw new TypeError('Illegal store path.');
    }
    var db = level(path.join(persistencePath, persistenceID), { keyEncoding: 'utf8', valueEncoding: 'binary' });
    return {
        get: function (key) { return Promise["try"](function () { return db.get(key); }).then(converter_1.bytesToTrits); },
        put: function (key, value) { return Promise["try"](function () { return db.put(key, converter_1.tritsToBytes(value)); }); },
        del: function (key) { return Promise["try"](function () { return db.del(key); }); },
        batch: function (commands) {
            return Promise["try"](function () {
                return db.batch(commands.map(function (command) {
                    switch (command.type) {
                        case types_1.PersistenceBatchTypes.put:
                            return {
                                type: types_1.PersistenceBatchTypes.put,
                                key: command.key,
                                value: converter_1.tritsToBytes(command.value)
                            };
                        case types_1.PersistenceBatchTypes.del:
                            return {
                                type: types_1.PersistenceBatchTypes.del,
                                key: command.key
                            };
                    }
                    /* istanbul ignore next */
                    return undefined;
                }));
            });
        },
        createReadStream: function (options) { return db.createReadStream(options); },
        close: function () { return Promise["try"](function () { return db.close(); }); },
        open: function () { return Promise["try"](function () { return db.open(); }); }
    };
};
//# sourceMappingURL=persistenceAdapterLevel.js.map