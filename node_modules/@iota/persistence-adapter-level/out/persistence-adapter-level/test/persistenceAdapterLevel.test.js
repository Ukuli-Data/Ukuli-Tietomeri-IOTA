"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var riteway_1 = require("riteway");
var persistenceAdapterLevel_1 = require("../src/persistenceAdapterLevel");
var isolate = (function () {
    var i = -1;
    return function (params) {
        i++;
        return persistenceAdapterLevel_1.createPersistenceAdapter(__assign({ persistenceID: 'ID-' + i, persistencePath: './test/temp' }, params));
    };
})();
riteway_1.describe('persistenceAdapter({ persistenceID, persistencePath })', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'persistenceID = undefined',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: undefined }),
            expected: new Error()
        });
        assert({
            given: 'persistenceID = null',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: null }),
            expected: new Error()
        });
        assert({
            given: 'persistenceID = NaN',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: NaN }),
            expected: new Error()
        });
        assert({
            given: 'persistenceID = 1 (numeric)',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: 1 }),
            expected: new Error()
        });
        assert({
            given: 'persistenceID = undefined',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: 'ID', persistencePath: undefined }),
            expected: new Error()
        });
        assert({
            given: 'persistencePath = null',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: 'ID', persistencePath: null }),
            expected: new Error()
        });
        assert({
            given: 'peristencePath = NaN',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: 'ID', persistencePath: NaN }),
            expected: new Error()
        });
        assert({
            given: 'persistencePath = 1 (numeric)',
            should: 'throw error',
            actual: riteway_1.Try(isolate, { persistenceID: 'ID', persistencePath: 1 }),
            expected: new Error()
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('adapter.put(key, value) -> adapter.read(key)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = assert;
                _b = {
                    given: 'a written value',
                    should: 'read it'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var adapter;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    adapter = isolate();
                                    return [4 /*yield*/, adapter.put('key', converter_1.valueToTrits(999314))];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/, adapter.get('key')];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = converter_1.valueToTrits(999314),
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('adapter.put(key, value) -> adapter.del(key) -> adapter.get(key))', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = assert;
                _b = {
                    given: 'a written value',
                    should: 'delete it'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var adapter, value, deleted, error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    adapter = isolate();
                                    value = new Int8Array(9).fill(1);
                                    deleted = false;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 5, , 6]);
                                    return [4 /*yield*/, adapter.put('key', value)];
                                case 2:
                                    _a.sent();
                                    return [4 /*yield*/, adapter.del('key')];
                                case 3:
                                    _a.sent();
                                    deleted = true;
                                    return [4 /*yield*/, adapter.get('key')];
                                case 4: return [2 /*return*/, _a.sent()];
                                case 5:
                                    error_1 = _a.sent();
                                    if (deleted && error_1.notFound) {
                                        return [2 /*return*/, true];
                                    }
                                    throw error_1;
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = true,
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('adapter.put(key, value) -> adapter.batch(commands) -> adapter.get(key))', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var a, b, _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                a = new Int8Array(1).fill(1);
                b = new Int8Array(1).fill(-1);
                _a = assert;
                _b = {
                    given: 'a written value',
                    should: 'batch delete it and persist a new one'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var adapter, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    adapter = isolate();
                                    return [4 /*yield*/, adapter.put('a', a)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, adapter.batch([
                                            {
                                                type: persistenceAdapterLevel_1.PersistenceBatchTypes.del,
                                                key: 'a'
                                            },
                                            {
                                                type: persistenceAdapterLevel_1.PersistenceBatchTypes.put,
                                                key: 'b',
                                                value: b
                                            },
                                        ])];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, adapter.get('a')];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    error_2 = _a.sent();
                                    if (!error_2.notFound) {
                                        throw error_2;
                                    }
                                    return [3 /*break*/, 6];
                                case 6: return [2 /*return*/, adapter.get('b')];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = b,
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('adapter.createReadStream(options)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var a, b, _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                a = new Int8Array(1).fill(1);
                b = new Int8Array(1).fill(-1);
                _a = assert;
                _b = {
                    given: 'persisted values',
                    should: 'read as stream'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var adapter;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    adapter = isolate();
                                    return [4 /*yield*/, adapter.put('a', a)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, adapter.put('b', b)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, new Promise(function (resolve, reject) {
                                            var result = [];
                                            var noop = function () { }; // tslint:disable-line
                                            adapter
                                                .createReadStream({ reverse: true })
                                                .on('data', function (_a) {
                                                var value = _a.value;
                                                result.push(converter_1.bytesToTrits(value));
                                            })
                                                .on('close', noop)
                                                .on('end', function () { return resolve(result); })
                                                .on('error', function (error) { return reject(error); });
                                        })];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = [b, a],
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('adapter.open() / adapter.close()', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var adapter, _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                adapter = isolate();
                _a = assert;
                _b = {
                    given: 'closed database',
                    should: 'open it and close it'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var error_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, adapter.open()];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, adapter.close()];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, adapter.put('key', new Int8Array(1))];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    error_3 = _a.sent();
                                    return [2 /*return*/, error_3];
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = (_c.sent()).message,
                        _b.expected = 'Database is not open',
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=persistenceAdapterLevel.test.js.map