import { IConfig } from "../src/models/IConfig";
import { tangleRelease } from "../src/tangle-release";

describe("Tangle Release", () => {
    afterEach(() => {
        jest.clearAllMocks();
    });

    test("No GITHUB_TOKEN", async () => {
        const config: IConfig = {};
        expect(async () => tangleRelease(config)).toThrow("You must provide the GitHub token setting");
    });

    test("No owner", async () => {
        const config: IConfig = {
            githubToken: "aaa"
        };
        expect(async () => tangleRelease(config)).toThrow("You must provide the owner setting");
    });

    test("No repository", async () => {
        const config: IConfig = {
            githubToken: "aaa",
            owner: "abc"
        };
        expect(async () => tangleRelease(config)).toThrow("You must provide the repository setting");
    });

    test("No releaseTagName", async () => {
        const config: IConfig = {
            githubToken: "aaa",
            owner: "abc",
            repository: "repo1/app1"
        };
        expect(async () => tangleRelease(config)).toThrow("You must provide the releaseTagName setting");
    });

    test("No seed", async () => {
        const config: IConfig = {
            githubToken: "aaa",
            owner: "abc",
            repository: "repo1/app1",
            releaseTagName: "v1"
        };
        expect(async () => tangleRelease(config)).toThrow("You must provide the seed setting");
    });

    // test("unmocked octokit bad credentials", async () => {
    //     const config: IConfig = {
    //         githubToken: "aaa",
    //         seed: "A".repeat(81),
    //         repository: "repo1/app1",
    //         releaseTagName: "mytag"
    //     };
    //     await tangleRelease(config);
    //     expect(setFailedMock).toHaveBeenCalledWith("Bad credentials");
    // });
});
