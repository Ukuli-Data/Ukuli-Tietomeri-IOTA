import { IConfig } from "../src/models/IConfig";
import { tangleRelease } from "../src/tangle-release";

describe("Tangle Release", () => {
    afterEach(() => {
        jest.clearAllMocks();
    });

    test("No GITHUB_TOKEN", async () => {
        const config: IConfig = {};
        expect(await tangleRelease(config)).toThrow("You must provide the GitHub token setting");
    });

    test("No seed", async () => {
        const config: IConfig = {
            githubToken: "aaa"
        };
        await tangleRelease(config);
        expect(setFailedMock).toHaveBeenCalledWith("You must provide the seed setting");
    });

    test("No tag_name", async () => {
        const config: IConfig = {
            githubToken: "aaa",
            seed: "A".repeat(81),
            repository: "repo1/app1"
        };
        await tangleRelease(config);
        expect(setFailedMock).toHaveBeenCalledWith("Input required and not supplied: tag_name");
    });

    test("unmocked octokit bad credentials", async () => {
        const config: IConfig = {
            githubToken: "aaa",
            seed: "A".repeat(81),
            repository: "repo1/app1",
            releaseTagName: "mytag"
        };
        await tangleRelease(config);
        expect(setFailedMock).toHaveBeenCalledWith("Bad credentials");
    });
});
