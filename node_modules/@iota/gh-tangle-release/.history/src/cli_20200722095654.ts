#!/usr/bin/env node
import { Command } from "commander";
import { sanitizeInput } from "./core";

const program = new Command();

program
    .storeOptionsAsProperties(false)
    .passCommandToAction(false);

program
    .version("0.6.3")
    .description("An application for creating a transaction on the IOTA Tangle from a GitHub release")
    .option("--github-token", "GitHub token for accessing your repository")
    .option("--owner", "GitHub repository owner")
    .option("--repository", "GitHub repository")
    .option("--release-tag", "The release tag from the GitHub repository")
    .option("--explorer-url", "Url of the explorer to use for exploration link",
        "https://utils.iota.org/transaction/:hash")
    .option("--node", "Url of the node to use for attaching the transaction to the tangle",
        "https://nodes.iota.cafe:443")
    .option("--depth", "Depth to use for attaching the transaction to the tangle",
        "3")
    .option("--mwm", "Minimum weight magnitude to use for attaching the transaction to the tangle",
        "14")
    .option("--seed", "81 Tryte seed used to generate addresses")
    .option("--address-index", "Index number used to generate addresses", "0")
    .option("--transaction-tag", "Tag to apply to the Tangle transaction")
    .option("--comment", "An optional comment to include in the Tangle transaction payload")
    .parse(process.argv);

try {
    const config = sanitizeInput({
        githubToken: program["github-token"],
        tangleExplorer: program["explorer-url"],
        node: program.node,
        depth: program.depth,
        mwm: program.mwm,
        seed: program.seed,
        addressIndex: program["address-index"],
        transactionTag: program["transaction-tag"],
        owner: program.owner,
        repository: program.repository,
        releaseTag: program["release-tag"],
        comment: program.comment
    });
    console.log("Configuration:");

    console.log(JSON.stringify(config, undefined, "\t"));
} catch (err) {
    console.error(err.message);
}
