#!/usr/bin/env node
import chalk from "chalk";
import { Command } from "commander";
import emoji from "node-emoji";
import { sanitizeInput } from "./core";

const version = "0.6.3";
console.log(chalk.green(`GitHub Tangle Release v${version} ${emoji.get("rocket")}\n`));

const program = new Command();

program
    .storeOptionsAsProperties(false)
    .passCommandToAction(false);

program
    .name(chalk.yellowBright("gh-tangle-release"))
    .version(version, "-v, --version", chalk.yellowBright("output the current version"))
    .description(chalk.cyan("An application for creating a transaction on the IOTA Tangle from a GitHub release."))
    .option("--github-token <string>", chalk.yellowBright("GitHub token for accessing your repository"))
    .option("--owner <string>", chalk.yellowBright("GitHub repository owner"))
    .option("--repository <string>", chalk.yellowBright("GitHub repository"))
    .option("--release-tag <string>", chalk.yellowBright("The release tag from the GitHub repository"))
    .option("--explorer-url <string>", chalk.yellowBright("Url of the explorer to use for exploration link"),
        "https://utils.iota.org/transaction/:hash")
    .option("--node <string>", chalk.yellowBright("Url of the node to use for attaching the transaction to the tangle"),
        "https://nodes.iota.cafe:443")
    .option("--depth <number>", chalk.yellowBright("Depth to use for attaching the transaction to the tangle"),
        "3")
    .option("--mwm <number>",
        chalk.yellowBright("Minimum weight magnitude to use for attaching the transaction to the tangle"),
        "14")
    .option("--seed <string>", chalk.yellowBright("81 Tryte seed used to generate addresses"))
    .option("--address-index <number>", chalk.yellowBright("Index number used to generate addresses", "0"))
    .option("--transaction-tag <string>", chalk.yellowBright("Tag to apply to the Tangle transaction"))
    .option("--comment <string>",
        chalk.yellowBright("An optional comment to include in the Tangle transaction payload"))
    .helpOption("--help",
        chalk.yellowBright("Display help"));

if (process.argv.length === 2) {
    program.help();
} else {
    try {
        program.parse(process.argv);
        console.log(program.opts());

        const config = sanitizeInput({
            githubToken: program.opts()["github-token"],
            tangleExplorer: program["explorer-url"],
            node: program.node,
            depth: program.depth,
            mwm: program.mwm,
            seed: program.seed,
            addressIndex: program["address-index"],
            transactionTag: program["transaction-tag"],
            owner: program.owner,
            repository: program.repository,
            releaseTag: program["release-tag"],
            comment: program.comment
        });
        console.log("Configuration:");
        console.log(JSON.stringify(config, undefined, "\t"));
    } catch (err) {
        program.help(str => {
            // console.log(str);
            console.error(chalk.red(`Error: ${err.message}`));
            return "";
        });
    }
}
