"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var kerl_1 = require("@iota/kerl");
var persistence_adapter_level_1 = require("@iota/persistence-adapter-level");
var signing_1 = require("@iota/signing");
var BluebirdPromise = require("bluebird");
var riteway_1 = require("riteway");
var errors = require("../../errors");
var persistence_1 = require("../src/persistence");
var KEY_INDEX_PREFIX = 'key_index';
var isolate = (function () {
    var seed = new Int8Array(243);
    var i = -1;
    return function () {
        i++;
        return persistence_adapter_level_1.createPersistenceAdapter({
            persistenceID: persistence_1.generatePersistenceID(signing_1.add(seed, converter_1.valueToTrits(i))),
            persistencePath: './test/temp'
        });
    };
})();
riteway_1.describe('generatePersistenceID(seed)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'seed.length < 243',
            should: 'throw Error',
            actual: riteway_1.Try(persistence_1.generatePersistenceID, new Int8Array(kerl_1["default"].HASH_LENGTH - 1)),
            expected: new Error(errors.ILLEGAL_SEED_LENGTH)
        });
        assert({
            given: 'seed.length > 243',
            should: 'throw Error',
            actual: riteway_1.Try(persistence_1.generatePersistenceID, new Int8Array(kerl_1["default"].HASH_LENGTH + 1)),
            expected: new Error(errors.ILLEGAL_SEED_LENGTH)
        });
        assert({
            given: 'valid seed',
            should: 'should produce correct persistenceID',
            actual: persistence_1.generatePersistenceID(new Int8Array(kerl_1["default"].HASH_LENGTH)),
            expected: 'WUPANEMSQXZGVLYUKXFEOHQQMPBRIQVJKHFBGMIRDMRFCTLILLBECYEFFLFVOZMJRKGGFDHBNCSQUOODD'
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('persistence.increment()', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b, _c, _d, _e, _f, numberOfActions, delay, _g, _h;
    var _this = this;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = assert;
                _b = {
                    given: 'a read fault',
                    should: 'throw an error'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var persistence, error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    persistence = persistence_1.createPersistence(__assign({}, isolate(), { get: function (key) {
                                            return BluebirdPromise.reject(new Error('error'));
                                        } }));
                                    return [4 /*yield*/, persistence.increment()];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_1 = _a.sent();
                                    return [2 /*return*/, error_1.message];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _j.sent(),
                        _b.expected = 'error',
                        _b)]);
                _c = assert;
                _d = {
                    given: 'a write fault',
                    should: 'throw an error'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var adapter, i, persistence, error_2, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    adapter = isolate();
                                    i = 0;
                                    return [4 /*yield*/, adapter.put(KEY_INDEX_PREFIX, converter_1.valueToTrits(100000))];
                                case 1:
                                    _b.sent();
                                    persistence = persistence_1.createPersistence(__assign({}, adapter, { put: function (key, value) {
                                            if (i !== 0) {
                                                return adapter.put(key, value);
                                            }
                                            else {
                                                i += 1;
                                                return BluebirdPromise.reject(new Error('error'));
                                            }
                                        } }));
                                    _b.label = 2;
                                case 2:
                                    _b.trys.push([2, 4, , 6]);
                                    return [4 /*yield*/, persistence.increment()];
                                case 3:
                                    _b.sent();
                                    return [3 /*break*/, 6];
                                case 4:
                                    error_2 = _b.sent();
                                    _a = [error_2.message];
                                    return [4 /*yield*/, persistence.increment()];
                                case 5: return [2 /*return*/, _a.concat([_b.sent()])];
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 2:
                _c.apply(void 0, [(_d.actual = _j.sent(),
                        _d.expected = ['error', converter_1.valueToTrits(100002)],
                        _d)]);
                _e = assert;
                _f = {
                    given: 'a faulty key index record',
                    should: 'throw error'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var adapter, persistence, error_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    adapter = isolate();
                                    return [4 /*yield*/, adapter.put(KEY_INDEX_PREFIX, converter_1.valueToTrits(-1))];
                                case 1:
                                    _a.sent();
                                    persistence = persistence_1.createPersistence(adapter);
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 4, , 5]);
                                    return [4 /*yield*/, persistence.increment()];
                                case 3:
                                    _a.sent();
                                    return [3 /*break*/, 5];
                                case 4:
                                    error_3 = _a.sent();
                                    return [2 /*return*/, error_3];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 3:
                _e.apply(void 0, [(_f.actual = _j.sent(),
                        _f.expected = new Error(errors.ILLEGAL_KEY_INDEX),
                        _f)]);
                numberOfActions = 50000;
                delay = function (t) { return new Promise(function (resolve) { return setTimeout(resolve, t); }); };
                _g = assert;
                _h = {
                    given: 'leveldb as a store',
                    should: 'increment index atomically'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var persistence, delayLowerBound, delayUpperBound, results, persistedIndex;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    persistence = persistence_1.createPersistence(isolate());
                                    delayLowerBound = 1;
                                    delayUpperBound = 30;
                                    return [4 /*yield*/, Promise.all(new Array(numberOfActions).fill(undefined).map(function () { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, delay(Math.floor(Math.random() * delayUpperBound) + delayLowerBound)];
                                                    case 1:
                                                        _a.sent();
                                                        return [2 /*return*/, persistence.increment()];
                                                }
                                            });
                                        }); }))];
                                case 1:
                                    results = _a.sent();
                                    return [4 /*yield*/, persistence.get(KEY_INDEX_PREFIX)];
                                case 2:
                                    persistedIndex = _a.sent();
                                    return [2 /*return*/, {
                                            results: results.map(function (trits) { return converter_1.tritsToValue(trits); }).sort(function (a, b) { return a - b; }),
                                            persistedIndex: persistedIndex
                                        }];
                            }
                        });
                    }); })()];
            case 4:
                _g.apply(void 0, [(_h.actual = _j.sent(),
                        _h.expected = {
                            results: new Array(numberOfActions).fill(0).map(function (_, i) { return i + 1; }),
                            persistedIndex: converter_1.valueToTrits(numberOfActions)
                        },
                        _h)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('persistence.put(key, value) -> persistence.get(key)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var value, persistence, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                value = new Int8Array(1).fill(1);
                persistence = persistence_1.createPersistence(isolate());
                return [4 /*yield*/, persistence.put('key', value)];
            case 1:
                _c.sent();
                _a = assert;
                _b = {
                    given: 'persisted value',
                    should: 'read it'
                };
                return [4 /*yield*/, persistence.get('key')];
            case 2:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = value,
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('persistence.put(key, value) -> persistence.del(key) -> persistence.get(key)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = assert;
                _b = {
                    given: 'persisted value',
                    should: 'delete it'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var persistence, value, deleted, error_4;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    persistence = persistence_1.createPersistence(isolate());
                                    value = new Int8Array(1).fill(1);
                                    deleted = false;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 5, , 6]);
                                    return [4 /*yield*/, persistence.put('key', value)];
                                case 2:
                                    _a.sent();
                                    return [4 /*yield*/, persistence.del('key')];
                                case 3:
                                    _a.sent();
                                    deleted = true;
                                    return [4 /*yield*/, persistence.get('key')];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    error_4 = _a.sent();
                                    if (deleted && error_4.notFound) {
                                        return [2 /*return*/, true];
                                    }
                                    throw error_4;
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = true,
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('persistence.put(key, value) -> persistence.batch(commands) -> persistence.get(key))', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var a, b, _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                a = new Int8Array(1).fill(1);
                b = new Int8Array(1).fill(-1);
                _a = assert;
                _b = {
                    given: 'persisted value',
                    should: 'batch delete it and persist a new one'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var persistence, error_5;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    persistence = persistence_1.createPersistence(isolate());
                                    return [4 /*yield*/, persistence.put('a', a)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, persistence.batch([
                                            {
                                                type: persistence_1.PersistenceBatchTypes.del,
                                                key: 'a'
                                            },
                                            {
                                                type: persistence_1.PersistenceBatchTypes.put,
                                                key: 'b',
                                                value: b
                                            },
                                        ])];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, persistence.get('a')];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    error_5 = _a.sent();
                                    if (!error_5.notFound) {
                                        throw error_5;
                                    }
                                    return [3 /*break*/, 6];
                                case 6: return [2 /*return*/, persistence.get('b')];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = b,
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
riteway_1.describe('persistence.on(eventName, callback)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var a, b, _a, _b;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                a = new Int8Array(1).fill(1);
                b = new Int8Array(1).fill(-1);
                _a = assert;
                _b = {
                    given: 'persisted values',
                    should: 'emit events'
                };
                return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var persistence, promise;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    persistence = persistence_1.createPersistence(isolate());
                                    promise = new Promise(function (resolve) {
                                        var result = [];
                                        persistence.on('data', function (_a) {
                                            var value = _a.value;
                                            if (value.length > 0) {
                                                result.push(value);
                                                if (result.length === 2) {
                                                    resolve(result);
                                                }
                                            }
                                        });
                                    });
                                    return [4 /*yield*/, persistence.put('a', a)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, persistence.put('b', b)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, promise];
                            }
                        });
                    }); })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _c.sent(),
                        _b.expected = [a, b],
                        _b)]);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=persistence.test.js.map