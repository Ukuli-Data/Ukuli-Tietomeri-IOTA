import { CDA, CDAParams, CDATransfer } from '@iota/cda';
import * as Promise from 'bluebird';
import '../../typed-array';
import { Bundle, Trytes } from '../../types';
import { AccountPreset, AddressGeneration, AddressGenerationParams, Network, NetworkParams, TransactionAttachment, TransactionAttachmentParams, TransactionIssuance, TransactionIssuanceParams } from './account';
export declare enum Events {
    selectInput = "selectedInput",
    prepareTransfer = "preparedTransfer",
    getTransactionsToApprove = "getTransactionsToApprove",
    attachToTangle = "attachToTangle",
    broadcast = "broadcast",
    error = "error"
}
export interface CDAAccount extends AddressGeneration<CDAParams, CDA>, TransactionIssuance<CDA, Bundle>, TransactionAttachment {
}
export declare function networkAdapter({ provider }: NetworkParams): Network;
export declare function addressGeneration(this: any, addressGenerationParams: AddressGenerationParams): {
    generateCDA: (cdaParams: CDAParams) => Promise<CDA>;
};
export declare function transactionIssuance(this: any, { seed, deposits, persistence, network, timeSource, now }: TransactionIssuanceParams): {
    sendToCDA: (cdaTransfer: CDATransfer) => Promise<readonly string[]>;
};
export declare function transactionAttachment(this: any, params: TransactionAttachmentParams): TransactionAttachment;
export declare function createAccountPreset(test?: {}): AccountPreset<CDAParams, CDA, ReadonlyArray<Trytes>>;
export declare const preset: AccountPreset<CDAParams, CDA, readonly string[]>;
export declare const testPreset: AccountPreset<CDAParams, CDA, readonly string[]>;
