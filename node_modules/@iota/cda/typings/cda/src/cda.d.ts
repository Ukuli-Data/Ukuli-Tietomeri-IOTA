import '../../typed-array';
import { Trytes } from '../../types';
export interface AbstractCDA {
    readonly timeoutAt: number;
    readonly expectedAmount?: number;
    readonly multiUse?: boolean;
}
export interface CDAParams extends AbstractCDA {
    readonly security?: 1 | 2 | 3;
}
export interface CDA extends AbstractCDA {
    readonly address: Trytes;
}
export interface CDAInput extends AbstractCDA {
    readonly address: Int8Array;
    readonly index: Int8Array;
    readonly security: 1 | 2 | 3;
    readonly balance?: number;
}
export interface CDATransfer extends CDA {
    readonly value: number;
}
export declare const CDA_ADDRESS_OFFSET = 0;
export declare const CDA_CHECKSUM_OFFSET: number;
export declare const CDA_CHECKSUM_LENGTH = 27;
export declare const CDA_INDEX_OFFSET: number;
export declare const CDA_INDEX_LENGTH = 35;
export declare const CDA_SECURITY_OFFSET: number;
export declare const CDA_SECURITY_LENGTH = 1;
export declare const CDA_TIMEOUT_AT_OFFSET: number;
export declare const CDA_TIMEOUT_AT_LENGTH = 27;
export declare const CDA_MULTI_USE_OFFSET: number;
export declare const CDA_MULTI_USE_LENGTH = 1;
export declare const CDA_EXPECTED_AMOUNT_OFFSET: number;
export declare const CDA_LENGTH: number;
export declare const CDASecurityValueAsTrit: (security: 1 | 2 | 3) => Int8Array;
export declare const CDASecurityTritAsValue: (trit: Int8Array) => 1 | 2 | 3;
export declare const CDAMultiUseBooleanAsTrit: (multiUse?: boolean | undefined) => Int8Array;
export declare const CDAMultiUseTritAsBoolean: (trit: Int8Array) => boolean;
export declare const CDAddress: (trits: Int8Array) => Int8Array;
export declare const CDATimeoutAt: (trits: Int8Array) => number;
export declare const CDAExpectedAmount: (trits: Int8Array) => number;
export declare const CDAMultiUse: (trits: Int8Array) => boolean;
export declare const isAlive: (currentTime: number, { timeoutAt, multiUse, expectedAmount }: AbstractCDA) => boolean;
export declare const isExpired: (currentTime: number, cda: AbstractCDA) => boolean;
export declare const CDAChecksum: (address: Int8Array, timeoutAt: Int8Array, multiUse: Int8Array, expectedAmount: Int8Array) => Int8Array;
export declare const isCDAWithValidChecksum: ({ address, timeoutAt, multiUse, expectedAmount }: CDA) => boolean;
export declare const serializeCDAInput: ({ address, timeoutAt, multiUse, expectedAmount, security, index, }: CDAInput) => Int8Array;
export declare const deserializeCDAInput: (trits: Int8Array) => CDAInput;
export declare const deserializeCDA: (trits: Int8Array) => CDA;
export declare const serializeCDAMagnet: ({ address, timeoutAt, multiUse, expectedAmount }: CDA) => string;
export declare const parseCDAMagnet: (magnet: string) => CDA;
export declare const verifyAbstractCDA: (currentTime: number, { timeoutAt, multiUse, expectedAmount }: AbstractCDA) => void;
export declare const verifyCDAParams: (currentTime: number, { timeoutAt, multiUse, expectedAmount, security }: CDAParams) => void;
export declare const verifyCDA: (currentTime: number, { address, timeoutAt, multiUse, expectedAmount }: CDA) => void;
export declare const verifyCDAChecksum: (cda: CDA) => void;
export declare const verifyCDATransfer: (currentTime: number, { address, timeoutAt, multiUse, expectedAmount, value }: CDATransfer) => void;
