"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var pad_1 = require("@iota/pad");
var transaction_1 = require("@iota/transaction");
var riteway_1 = require("riteway");
var errors = require("../../errors");
var cda_1 = require("../src/cda");
var security;
(function (security) {
    security[security["TWO"] = 2] = "TWO";
})(security || (security = {}));
var address = 'A'.repeat(transaction_1.ADDRESS_LENGTH / 3);
var checksum = 'WOWRMBLMD';
var addressChecksum = address + checksum;
var timeoutAt = 1552847640;
var multiUse = false;
var expectedAmount = 1000;
var magnet = "iota://" + address + checksum + "/?timeout_at=" + timeoutAt + "&multi_use=" + cda_1.CDAMultiUseBooleanAsTrit(multiUse) + "&expected_amount=" + expectedAmount;
var cda = {
    address: addressChecksum,
    timeoutAt: timeoutAt,
    multiUse: multiUse,
    expectedAmount: expectedAmount
};
var cdaInput = __assign({}, cda, { address: converter_1.trytesToTrits(address), index: pad_1.padTrits(cda_1.CDA_INDEX_LENGTH)(converter_1.valueToTrits(0)), security: security.TWO });
var addressB = 'B'.repeat(transaction_1.ADDRESS_LENGTH / 3);
var checksumB = 'JMYXQUGCZ';
var addressChecksumB = addressB + checksumB;
var timeoutAtB = 1552847640;
var multiUseB = true;
var expectedAmountB = 0;
var magnetBShort = "iota://" + addressB + checksumB + "/?timeout_at=" + timeoutAtB + "&multi_use=" + cda_1.CDAMultiUseBooleanAsTrit(multiUseB);
var cdaB = {
    address: addressChecksumB,
    timeoutAt: timeoutAtB,
    multiUse: multiUseB,
    expectedAmount: expectedAmountB
};
var cdaInputB = __assign({}, cdaB, { address: converter_1.trytesToTrits(addressB), index: pad_1.padTrits(cda_1.CDA_INDEX_LENGTH)(converter_1.valueToTrits(12183423)), security: security.TWO });
var magnetWithInvalidChecksum = "iota://" + address + checksumB + "/?timeout_at=" + timeoutAt + "&multi_use=" + cda_1.CDAMultiUseBooleanAsTrit(multiUse) + "&expected_amount=" + expectedAmount;
var magnetWithMultiUseAndExpectedAmount = "iota://" + address + "LWZUEUTVH/?timeout_at=" + timeoutAt + "&multi_use=" + cda_1.CDAMultiUseBooleanAsTrit(!multiUse) + "&expected_amount=" + expectedAmount;
var magnetLinkWithInvalidAddressTrytes = "iota://adr" + address + "LWZUEUTVH/?timeout_at=" + timeoutAt + "&multi_use=" + cda_1.CDAMultiUseBooleanAsTrit(!multiUse) + "&expected_amount=" + expectedAmount;
var magnetLinkWithInvalidTimeoutAtField = "iota://" + address + "LWZUEUTVH/?timeout_at=sadf&multi_use=" + cda_1.CDAMultiUseBooleanAsTrit(!multiUse);
var magnetLinkWithInvalidMultiUseField = "iota://" + address + "LWZUEUTVH/?timeout_at=" + timeoutAt + "&multi_use=3";
var magnetLinkWithInvalidScheme = "iot://" + address + "LWZUEUTVH/?timeout_at=" + timeoutAt + "&multi_use=1";
var magnetLinkWithMissingTimeoutField = "iota://" + address + "LWZUEUTVH/?multi_use=1";
var currentTime = Math.floor(Date.now() / 1000);
var pastTime = currentTime - 1;
var futureTime = currentTime + 1;
var expiredCda = {
    address: addressChecksum,
    timeoutAt: pastTime
};
var aliveCda = {
    address: addressChecksum,
    timeoutAt: futureTime,
    expectedAmount: 100
};
riteway_1.describe('isExpired', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'alive CDA',
            should: 'return false',
            actual: cda_1.isExpired(currentTime, aliveCda),
            expected: false
        });
        assert({
            given: 'expired cda',
            should: 'return true',
            actual: cda_1.isExpired(currentTime, expiredCda),
            expected: true
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('isExpired', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'alive CDA',
            should: 'return true',
            actual: cda_1.isAlive(currentTime, aliveCda),
            expected: true
        });
        assert({
            given: 'expired cda',
            should: 'return false',
            actual: cda_1.isAlive(currentTime, expiredCda),
            expected: false
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('(de)serializeCDAInput', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'a CDA input with expected amount',
            should: 'serialize and deserialize it',
            actual: cda_1.deserializeCDAInput(cda_1.serializeCDAInput(cdaInput)),
            expected: cdaInput
        });
        assert({
            given: 'a CDA input with multi-use set to 1',
            should: 'serialize and deserialize it',
            actual: cda_1.deserializeCDAInput(cda_1.serializeCDAInput(cdaInputB)),
            expected: cdaInputB
        });
        assert({
            given: 'a CDA input with security level 1',
            should: 'serialize and deserialize it',
            actual: cda_1.deserializeCDAInput(cda_1.serializeCDAInput(__assign({}, cdaInputB, { security: 1 }))),
            expected: __assign({}, cdaInputB, { security: 1 })
        });
        assert({
            given: 'a CDA input with security level 3',
            should: 'serialize and deserialize it',
            actual: cda_1.deserializeCDAInput(cda_1.serializeCDAInput(__assign({}, cdaInputB, { security: 3 }))),
            expected: __assign({}, cdaInputB, { security: 3 })
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('serializeCDAMagnet / parseCDAMagnet', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'a magnet link with expected amount',
            should: 'parse and serialize magnet',
            actual: cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(magnet)),
            expected: magnet
        });
        assert({
            given: 'a magnet link with multi-use set to 1',
            should: 'parse and serialize magnet',
            actual: cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(magnetBShort)),
            expected: magnetBShort
        });
        assert({
            given: 'a magnet link with invalid checksum',
            should: 'throw "Invalid CDA checksum" Error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetWithInvalidChecksum).message,
            expected: 'Invalid CDA checksum.'
        });
        assert({
            given: 'a magnet link with multi-use and expected amount set to 1',
            should: 'throw error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetWithMultiUseAndExpectedAmount).message,
            expected: 'Only one of the following fields can be set: multiUse, expectedAmount'
        });
        assert({
            given: 'a magnet link with invalid address trytes',
            should: 'throw error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetLinkWithInvalidAddressTrytes).message,
            expected: 'Invalid magnet link: Invalid address trytes'
        });
        assert({
            given: 'a magnet link with invalid multi-use field',
            should: 'throw error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetLinkWithInvalidMultiUseField).message,
            expected: 'Invalid magnet link: Invalid `multi_use` field'
        });
        assert({
            given: 'a magnet link with invalid address trytes',
            should: 'throw error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetLinkWithInvalidTimeoutAtField).message,
            expected: 'Invalid magnet link: Invalid `timeout_at` field'
        });
        assert({
            given: 'a magnet link with unknown scheme',
            should: 'throw error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetLinkWithInvalidScheme).message,
            expected: 'Invalid magnet link: Unknown scheme'
        });
        assert({
            given: 'a magnet link with missing timeout field',
            should: 'throw error',
            actual: riteway_1.Try(function (x) { return cda_1.serializeCDAMagnet(cda_1.parseCDAMagnet(x)); }, magnetLinkWithMissingTimeoutField).message,
            expected: 'Invalid magnet link: Missing `timeout_at` field'
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('verifyCDATransfer', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'a valid CDA transfer',
            should: 'not throw',
            actual: cda_1.verifyCDATransfer(timeoutAt - 1, __assign({}, cda, { value: 1000 })),
            expected: undefined
        });
        assert({
            given: 'a CDA transfer with invalid address trytes',
            should: 'throw "Illegal address trytes" error',
            actual: riteway_1.Try(cda_1.verifyCDATransfer, timeoutAt - 1, __assign({}, cda, { address: 'asdf' + address, value: 1000 })).message,
            expected: 'Illegal address trytes.'
        });
        assert({
            given: 'a CDA transfer with value that exceeds expected amount',
            should: 'throw error',
            actual: riteway_1.Try(cda_1.verifyCDATransfer, timeoutAt - 1, __assign({}, cda, { value: 1001 })).message,
            expected: 'Value cannot exceed expected amount of ' + cda.expectedAmount + ' iotas.'
        });
        assert({
            given: 'a CDA transfer with invalid value',
            should: 'throw "Illegal value" error',
            actual: riteway_1.Try(cda_1.verifyCDATransfer, timeoutAt - 1, __assign({}, cda, { value: '1000' })).message,
            expected: 'Illegal value.'
        });
        return [2 /*return*/];
    });
}); });
riteway_1.describe('verifyCDAParams', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        assert({
            given: 'valid CDA params',
            should: 'not throw error',
            actual: cda_1.verifyCDAParams(timeoutAt - 1, {
                timeoutAt: timeoutAt,
                multiUse: multiUse,
                expectedAmount: expectedAmount,
                security: security.TWO
            }),
            expected: undefined
        });
        assert({
            given: 'expired timeout',
            should: 'throw "Expired timeout" error',
            actual: riteway_1.Try(cda_1.verifyCDAParams, timeoutAt, {
                timeoutAt: timeoutAt,
                multiUse: multiUse,
                expectedAmount: expectedAmount,
                security: security.TWO
            }).message,
            expected: 'Expired timeout.'
        });
        assert({
            given: 'illegal timeout value',
            should: 'throw "Illegal multi-use value" error',
            actual: riteway_1.Try(cda_1.verifyCDAParams, timeoutAt - 1, {
                timeoutAt: timeoutAt.toString(),
                multiUse: multiUse,
                security: security.TWO
            }).message,
            expected: 'Illegal timeout. Must be an integer.'
        });
        assert({
            given: 'illegal multi-use value',
            should: 'throw "Illegal multi-use value" error',
            actual: riteway_1.Try(cda_1.verifyCDAParams, timeoutAt - 1, {
                timeoutAt: timeoutAt,
                multiUse: '1',
                security: security.TWO
            }).message,
            expected: 'Illegal multi-use value. Must be boolean.'
        });
        assert({
            given: 'illegal expected amount',
            should: 'throw "Illegal expected amount." error',
            actual: riteway_1.Try(cda_1.verifyCDAParams, timeoutAt - 1, {
                timeoutAt: timeoutAt,
                expectedAmount: '1',
                security: security.TWO
            }).message,
            expected: 'Illegal expected amount.'
        });
        assert({
            given: 'expected amount & multi-use',
            should: 'throw error',
            actual: riteway_1.Try(cda_1.verifyCDAParams, timeoutAt - 1, {
                timeoutAt: timeoutAt,
                multiUse: true,
                expectedAmount: 1000,
                security: security.TWO
            }).message,
            expected: 'Only one of the following fields can be set: multiUse, expectedAmount'
        });
        assert({
            given: 'invalid security value',
            should: 'throw error',
            actual: riteway_1.Try(cda_1.verifyCDAParams, timeoutAt - 1, {
                timeoutAt: timeoutAt,
                expectedAmount: 1000,
                security: 4
            }).message,
            expected: errors.INVALID_SECURITY_LEVEL
        });
        return [2 /*return*/];
    });
}); });
//# sourceMappingURL=cda.test.js.map