"use strict";
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var curl_1 = require("@iota/curl");
var pad_1 = require("@iota/pad");
var transaction_1 = require("@iota/transaction");
var querystring = require("querystring");
var errors = require("../../errors");
var guards_1 = require("../../guards");
require("../../typed-array");
var TRYTE_WIDTH = 3;
exports.CDA_ADDRESS_OFFSET = 0;
exports.CDA_CHECKSUM_OFFSET = exports.CDA_ADDRESS_OFFSET + transaction_1.ADDRESS_LENGTH;
exports.CDA_CHECKSUM_LENGTH = 27;
exports.CDA_INDEX_OFFSET = exports.CDA_CHECKSUM_OFFSET + exports.CDA_CHECKSUM_LENGTH;
exports.CDA_INDEX_LENGTH = 35;
exports.CDA_SECURITY_OFFSET = exports.CDA_INDEX_OFFSET + exports.CDA_INDEX_LENGTH;
exports.CDA_SECURITY_LENGTH = 1;
exports.CDA_TIMEOUT_AT_OFFSET = exports.CDA_SECURITY_OFFSET + exports.CDA_SECURITY_LENGTH;
exports.CDA_TIMEOUT_AT_LENGTH = 27;
exports.CDA_MULTI_USE_OFFSET = exports.CDA_TIMEOUT_AT_OFFSET + exports.CDA_TIMEOUT_AT_LENGTH;
exports.CDA_MULTI_USE_LENGTH = 1;
exports.CDA_EXPECTED_AMOUNT_OFFSET = exports.CDA_MULTI_USE_OFFSET + exports.CDA_MULTI_USE_LENGTH;
exports.CDA_LENGTH = exports.CDA_EXPECTED_AMOUNT_OFFSET + transaction_1.VALUE_LENGTH;
exports.CDASecurityValueAsTrit = function (security) { return new Int8Array(1).fill([2, -1, 0, 1][security]); };
exports.CDASecurityTritAsValue = function (trit) { return (trit[0] === -1 ? 1 : trit[0] === 0 ? 2 : 3); };
exports.CDAMultiUseBooleanAsTrit = function (multiUse) { return new Int8Array(1).fill(multiUse ? 1 : 0); };
exports.CDAMultiUseTritAsBoolean = function (trit) { return (trit[0] === 1 ? true : false); };
exports.CDAddress = function (trits) {
    return trits.slice(exports.CDA_ADDRESS_OFFSET, exports.CDA_ADDRESS_OFFSET + transaction_1.ADDRESS_LENGTH);
};
exports.CDATimeoutAt = function (trits) {
    return converter_1.tritsToValue(trits.slice(exports.CDA_TIMEOUT_AT_OFFSET, exports.CDA_TIMEOUT_AT_OFFSET + exports.CDA_TIMEOUT_AT_LENGTH));
};
exports.CDAExpectedAmount = function (trits) {
    return converter_1.tritsToValue(trits.slice(exports.CDA_EXPECTED_AMOUNT_OFFSET, exports.CDA_EXPECTED_AMOUNT_OFFSET + transaction_1.VALUE_LENGTH));
};
exports.CDAMultiUse = function (trits) {
    return exports.CDAMultiUseTritAsBoolean(trits.slice(exports.CDA_MULTI_USE_OFFSET, exports.CDA_MULTI_USE_OFFSET + exports.CDA_MULTI_USE_LENGTH));
};
exports.isAlive = function (currentTime, _a) {
    var timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount;
    return timeoutAt > currentTime;
};
exports.isExpired = function (currentTime, cda) { return !exports.isAlive(currentTime, cda); };
exports.CDAChecksum = function (address, timeoutAt, multiUse, expectedAmount) {
    var sponge = new curl_1["default"](81);
    var checksum = new Int8Array(curl_1["default"].HASH_LENGTH);
    sponge.absorb(address, 0, curl_1["default"].HASH_LENGTH);
    sponge.squeeze(checksum, 0, curl_1["default"].HASH_LENGTH);
    sponge.reset();
    checksum.set(pad_1.padTrits(exports.CDA_TIMEOUT_AT_LENGTH)(timeoutAt), curl_1["default"].HASH_LENGTH - exports.CDA_TIMEOUT_AT_LENGTH - exports.CDA_MULTI_USE_LENGTH - transaction_1.VALUE_LENGTH);
    if (exports.CDAMultiUseTritAsBoolean(multiUse)) {
        checksum.set(multiUse, curl_1["default"].HASH_LENGTH - exports.CDA_MULTI_USE_LENGTH - transaction_1.VALUE_LENGTH);
        checksum.set(new Int8Array(transaction_1.VALUE_LENGTH), curl_1["default"].HASH_LENGTH - transaction_1.VALUE_LENGTH);
    }
    else {
        checksum.set(new Int8Array(0), curl_1["default"].HASH_LENGTH - exports.CDA_MULTI_USE_LENGTH - transaction_1.VALUE_LENGTH);
        checksum.set(pad_1.padTrits(transaction_1.VALUE_LENGTH)(expectedAmount), curl_1["default"].HASH_LENGTH - transaction_1.VALUE_LENGTH);
    }
    sponge.absorb(checksum, 0, curl_1["default"].HASH_LENGTH);
    sponge.squeeze(checksum, 0, curl_1["default"].HASH_LENGTH);
    return checksum.slice(-exports.CDA_CHECKSUM_LENGTH);
};
exports.isCDAWithValidChecksum = function (_a) {
    var address = _a.address, timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount;
    return address.slice(-(exports.CDA_CHECKSUM_LENGTH / TRYTE_WIDTH)) ===
        converter_1.tritsToTrytes(exports.CDAChecksum(converter_1.trytesToTrits(address), converter_1.valueToTrits(timeoutAt), exports.CDAMultiUseBooleanAsTrit(multiUse), converter_1.valueToTrits(expectedAmount || 0)));
};
exports.serializeCDAInput = function (_a) {
    var address = _a.address, timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount, security = _a.security, index = _a.index;
    var trits = new Int8Array(exports.CDA_LENGTH);
    var timeoutAtTrits = converter_1.valueToTrits(timeoutAt);
    var multiUseTrits = exports.CDAMultiUseBooleanAsTrit(multiUse);
    var expectedAmountTrits = converter_1.valueToTrits(expectedAmount || 0);
    trits.set(address.slice(0, transaction_1.ADDRESS_LENGTH), exports.CDA_ADDRESS_OFFSET);
    trits.set(exports.CDAChecksum(address, timeoutAtTrits, multiUseTrits, expectedAmountTrits), exports.CDA_CHECKSUM_OFFSET);
    trits.set(index, exports.CDA_INDEX_OFFSET);
    trits.set(exports.CDASecurityValueAsTrit(security), exports.CDA_SECURITY_OFFSET);
    trits.set(timeoutAtTrits, exports.CDA_TIMEOUT_AT_OFFSET);
    trits.set(expectedAmountTrits, exports.CDA_EXPECTED_AMOUNT_OFFSET);
    trits.set(multiUseTrits, exports.CDA_MULTI_USE_OFFSET);
    return trits;
};
exports.deserializeCDAInput = function (trits) { return ({
    address: exports.CDAddress(trits),
    index: trits.slice(exports.CDA_INDEX_OFFSET, exports.CDA_INDEX_OFFSET + exports.CDA_INDEX_LENGTH),
    security: exports.CDASecurityTritAsValue(trits.slice(exports.CDA_SECURITY_OFFSET, exports.CDA_SECURITY_OFFSET + exports.CDA_SECURITY_LENGTH)),
    timeoutAt: exports.CDATimeoutAt(trits),
    multiUse: exports.CDAMultiUse(trits),
    expectedAmount: exports.CDAExpectedAmount(trits)
}); };
exports.deserializeCDA = function (trits) { return ({
    address: converter_1.tritsToTrytes(trits.slice(exports.CDA_ADDRESS_OFFSET, exports.CDA_ADDRESS_OFFSET + transaction_1.ADDRESS_LENGTH)) +
        converter_1.tritsToTrytes(trits.slice(exports.CDA_CHECKSUM_OFFSET, exports.CDA_CHECKSUM_OFFSET + exports.CDA_CHECKSUM_LENGTH)),
    timeoutAt: converter_1.tritsToValue(trits.slice(exports.CDA_TIMEOUT_AT_OFFSET, exports.CDA_TIMEOUT_AT_OFFSET + exports.CDA_TIMEOUT_AT_LENGTH)),
    multiUse: exports.CDAMultiUseTritAsBoolean(trits.slice(exports.CDA_MULTI_USE_OFFSET, exports.CDA_MULTI_USE_OFFSET + exports.CDA_MULTI_USE_LENGTH)),
    expectedAmount: converter_1.tritsToValue(trits.slice(exports.CDA_EXPECTED_AMOUNT_OFFSET, exports.CDA_EXPECTED_AMOUNT_OFFSET + transaction_1.VALUE_LENGTH))
}); };
exports.serializeCDAMagnet = function (_a) {
    var address = _a.address, timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount;
    var magnet = 'iota://' + address + '/?timeout_at=' + timeoutAt;
    magnet += '&multi_use=' + (multiUse === true ? '1' : '0');
    if (expectedAmount) {
        magnet += '&expected_amount=' + expectedAmount;
    }
    return magnet;
};
exports.parseCDAMagnet = function (magnet) {
    magnet = magnet.trim();
    var scheme = 'iota://';
    if (magnet.indexOf(scheme) === -1 ||
        magnet.length < scheme.length + transaction_1.ADDRESS_LENGTH / TRYTE_WIDTH + exports.CDA_CHECKSUM_LENGTH / TRYTE_WIDTH) {
        throw new Error('Invalid magnet link: Unknown scheme');
    }
    var address = magnet.slice(scheme.length, scheme.length + transaction_1.ADDRESS_LENGTH / TRYTE_WIDTH + exports.CDA_CHECKSUM_LENGTH / TRYTE_WIDTH);
    if (!guards_1.isTrytesOfExactLength(address, transaction_1.ADDRESS_LENGTH / TRYTE_WIDTH + exports.CDA_CHECKSUM_LENGTH / TRYTE_WIDTH)) {
        throw new Error('Invalid magnet link: Invalid address trytes');
    }
    var _a = querystring.parse(magnet
        .slice(scheme.length + transaction_1.ADDRESS_LENGTH / TRYTE_WIDTH + exports.CDA_CHECKSUM_LENGTH / TRYTE_WIDTH)
        .replace(/^(\/\?)/g, '')), timeout_at = _a.timeout_at, multi_use = _a.multi_use, expected_amount = _a.expected_amount;
    if (typeof timeout_at !== 'string') {
        throw new Error('Invalid magnet link: Missing `timeout_at` field');
    }
    if (typeof multi_use !== 'undefined' && multi_use !== '1' && multi_use !== '0') {
        throw new Error('Invalid magnet link: Invalid `multi_use` field');
    }
    if (multi_use && expected_amount && multi_use === '1' && expected_amount !== '0') {
        throw new TypeError('Only one of the following fields can be set: multiUse, expectedAmount');
    }
    /* istanbul ignore next */
    if (typeof expected_amount !== 'undefined' && typeof expected_amount !== 'string') {
        /* istanbul ignore next */
        throw new Error('Invalid magnet link: Invalid `expected_amount` field');
    }
    var timeoutAt = parseInt(timeout_at, 10);
    if (!Number.isInteger(timeoutAt)) {
        throw new Error('Invalid magnet link: Invalid `timeout_at` field');
    }
    var multiUse = multi_use === '1' ? true : false;
    var expectedAmount = typeof expected_amount !== 'undefined' ? parseInt(expected_amount, 10) : undefined;
    var cda = {
        address: address,
        timeoutAt: timeoutAt,
        multiUse: multiUse,
        expectedAmount: expectedAmount
    };
    exports.verifyCDAChecksum(cda);
    return cda;
};
exports.verifyAbstractCDA = function (currentTime, _a) {
    var timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount;
    if (!Number.isInteger(timeoutAt)) {
        throw new TypeError('Illegal timeout. Must be an integer.');
    }
    if (multiUse && expectedAmount) {
        throw new TypeError('Only one of the following fields can be set: multiUse, expectedAmount');
    }
    if (typeof multiUse !== 'undefined' && typeof multiUse !== 'boolean') {
        throw new TypeError('Illegal multi-use value. Must be boolean.');
    }
    if (typeof expectedAmount !== 'undefined' && (!Number.isInteger(expectedAmount) || expectedAmount < 0)) {
        throw new TypeError('Illegal expected amount.');
    }
    if (timeoutAt <= currentTime) {
        throw new Error('Expired timeout.');
    }
};
exports.verifyCDAParams = function (currentTime, _a) {
    var timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount, security = _a.security;
    exports.verifyAbstractCDA(currentTime, { timeoutAt: timeoutAt, multiUse: multiUse, expectedAmount: expectedAmount });
    if (security && (!Number.isInteger(security) || [1, 2, 3].indexOf(security) === -1)) {
        throw new Error(errors.INVALID_SECURITY_LEVEL);
    }
};
exports.verifyCDA = function (currentTime, _a) {
    var address = _a.address, timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount;
    if (!guards_1.isTrytesOfExactLength(address, transaction_1.ADDRESS_LENGTH / TRYTE_WIDTH + exports.CDA_CHECKSUM_LENGTH / TRYTE_WIDTH)) {
        throw new Error('Illegal address trytes.');
    }
    exports.verifyAbstractCDA(currentTime, { timeoutAt: timeoutAt, multiUse: multiUse, expectedAmount: expectedAmount });
    exports.verifyCDAChecksum({ address: address, timeoutAt: timeoutAt, multiUse: multiUse, expectedAmount: expectedAmount });
};
exports.verifyCDAChecksum = function (cda) {
    if (!exports.isCDAWithValidChecksum(cda)) {
        throw new Error('Invalid CDA checksum.');
    }
};
exports.verifyCDATransfer = function (currentTime, _a) {
    var address = _a.address, timeoutAt = _a.timeoutAt, multiUse = _a.multiUse, expectedAmount = _a.expectedAmount, value = _a.value;
    if (!Number.isInteger(value)) {
        throw new Error('Illegal value.');
    }
    if (expectedAmount && value > expectedAmount) {
        throw new Error('Value cannot exceed expected amount of ' + expectedAmount + ' iotas.');
    }
    exports.verifyCDA(currentTime, { address: address, timeoutAt: timeoutAt, multiUse: multiUse, expectedAmount: expectedAmount });
};
//# sourceMappingURL=cda.js.map