/* tslint:disable */
/* eslint-disable */
/**
* @param {string} uri 
*/
export function addNode(uri: string): void;
/**
* @param {any} uris 
* @returns {any} 
*/
export function addNeighbors(uris: any): any;
/**
* @param {any} trunk_transaction_hash_bytes 
* @param {any} branch_transaction_hash_bytes 
* @param {number | undefined} min_weight_magnitude 
* @param {any} transactions_trytes 
* @returns {any} 
*/
export function attachToTangle(trunk_transaction_hash_bytes: any, branch_transaction_hash_bytes: any, min_weight_magnitude: number | undefined, transactions_trytes: any): any;
/**
* @param {any} tail_transaction_hash_bytes 
* @returns {any} 
*/
export function broadcastBundle(tail_transaction_hash_bytes: any): any;
/**
* @param {any} trytes 
* @returns {any} 
*/
export function broadcastTransactions(trytes: any): any;
/**
* @param {any} tails 
* @returns {any} 
*/
export function checkConsistency(tails: any): any;
/**
* @param {any} bundle_hashes_bytes 
* @param {any} tags 
* @param {any} aprovees_hashes_bytes 
* @param {any} addresses 
* @returns {any} 
*/
export function findTransactions(bundle_hashes_bytes: any, tags: any, aprovees_hashes_bytes: any, addresses: any): any;
/**
* @param {any} addresses 
* @param {any} tips_hashes_bytes 
* @returns {any} 
*/
export function getBalances(addresses: any, tips_hashes_bytes: any): any;
/**
* @param {any} hash_bytes 
* @returns {any} 
*/
export function getBundle(hash_bytes: any): any;
/**
* @param {any} transaction_hashes_bytes 
* @returns {any} 
*/
export function getInclusionStates(transaction_hashes_bytes: any): any;
/**
* @param {string} seed 
* @param {number | undefined} index 
* @param {number | undefined} security 
* @param {number | undefined} threshold 
* @returns {any} 
*/
export function getInputs(seed: string, index?: number, security?: number, threshold?: number): any;
/**
* @param {any} transaction_hashes 
* @returns {any} 
*/
export function getLatestInclusion(transaction_hashes: any): any;
/**
* @returns {any} 
*/
export function getLatestSolidSubtangleMilestone(): any;
/**
* @returns {any} 
*/
export function getMissingTransactions(): any;
/**
* @returns {any} 
*/
export function getNeighbors(): any;
/**
* @param {string} seed 
* @param {number | undefined} index 
* @param {number | undefined} security 
* @returns {any} 
*/
export function getNewAddress(seed: string, index?: number, security?: number): any;
/**
* @returns {any} 
*/
export function getNodeApiConfiguration(): any;
/**
* @returns {any} 
*/
export function getNodeInfo(): any;
/**
* @returns {any} 
*/
export function getTips(): any;
/**
* @param {number | undefined} depth 
* @param {any} reference_hash_bytes 
* @returns {any} 
*/
export function getTransactionsToApprove(depth: number | undefined, reference_hash_bytes: any): any;
/**
* @param {any} hash_bytes 
* @returns {any} 
*/
export function getTrytes(hash_bytes: any): any;
/**
* @returns {any} 
*/
export function interruptAttachingToTangle(): any;
/**
* @param {string} address 
* @returns {any} 
*/
export function isAddressUsed(address: string): any;
/**
* @param {any} tail_hash 
* @returns {any} 
*/
export function isPromotable(tail_hash: any): any;
/**
* @param {string} seed 
* @returns {any} 
*/
export function prepareTransfers(seed: string): any;
/**
* @param {any} uris 
* @returns {any} 
*/
export function removeNeighbors(uris: any): any;
/**
* @param {any} hash_bytes 
* @param {number | undefined} depth 
* @param {number | undefined} min_weight_magnitude 
* @param {any} trytes 
* @param {any} reference_hash_bytes 
* @returns {any} 
*/
export function replayBundle(hash_bytes: any, depth: number | undefined, min_weight_magnitude: number | undefined, trytes: any, reference_hash_bytes: any): any;
/**
* @param {string} seed 
* @param {any} transfers 
* @param {number | undefined} min_weight_magnitude 
* @returns {any} 
*/
export function sendTransfers(seed: string, transfers: any, min_weight_magnitude?: number): any;
/**
* @param {any} trytes 
* @returns {any} 
*/
export function storeAndBroadcast(trytes: any): any;
/**
* @param {any} trytes 
* @returns {any} 
*/
export function storeTransactions(trytes: any): any;
/**
* @param {any} hash_bytes 
* @returns {any} 
*/
export function traverseBundle(hash_bytes: any): any;
/**
*/
export class NewAddress {
  free(): void;
/**
* @returns {string} 
*/
  readonly address: string;
/**
* @returns {number} 
*/
  index: number;
}
/**
*/
export class NewTransfer {
  free(): void;
}
/**
*/
export class SentTransaction {
  free(): void;
}
