
let wasm;

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

function getObject(idx) { return heap[idx]; }

let heap_next = heap.length;

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

let WASM_VECTOR_LEN = 0;

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1 };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) wasm.__wbindgen_export_2.get(dtor)(a, state.b);
            else state.a = a;
        }
    };
    real.original = state;
    return real;
}
function __wbg_adapter_30(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6ea90c33d975c480(arg0, arg1, addHeapObject(arg2));
}

/**
* @param {string} uri
*/
export function addNode(uri) {
    var ptr0 = passStringToWasm0(uri, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    wasm.addNode(ptr0, len0);
}

/**
* @param {any} uris
* @returns {any}
*/
export function addNeighbors(uris) {
    var ret = wasm.addNeighbors(addHeapObject(uris));
    return takeObject(ret);
}

function isLikeNone(x) {
    return x === undefined || x === null;
}
/**
* @param {any} trunk_transaction_hash_bytes
* @param {any} branch_transaction_hash_bytes
* @param {number | undefined} min_weight_magnitude
* @param {any} transactions_trytes
* @returns {any}
*/
export function attachToTangle(trunk_transaction_hash_bytes, branch_transaction_hash_bytes, min_weight_magnitude, transactions_trytes) {
    var ret = wasm.attachToTangle(addHeapObject(trunk_transaction_hash_bytes), addHeapObject(branch_transaction_hash_bytes), isLikeNone(min_weight_magnitude) ? 0xFFFFFF : min_weight_magnitude, addHeapObject(transactions_trytes));
    return takeObject(ret);
}

/**
* @param {any} tail_transaction_hash_bytes
* @returns {any}
*/
export function broadcastBundle(tail_transaction_hash_bytes) {
    var ret = wasm.broadcastBundle(addHeapObject(tail_transaction_hash_bytes));
    return takeObject(ret);
}

/**
* @param {any} trytes
* @returns {any}
*/
export function broadcastTransactions(trytes) {
    var ret = wasm.broadcastTransactions(addHeapObject(trytes));
    return takeObject(ret);
}

/**
* @param {any} tails
* @returns {any}
*/
export function checkConsistency(tails) {
    var ret = wasm.checkConsistency(addHeapObject(tails));
    return takeObject(ret);
}

/**
* @param {any} bundle_hashes_bytes
* @param {any} tags
* @param {any} aprovees_hashes_bytes
* @param {any} addresses
* @returns {any}
*/
export function findTransactions(bundle_hashes_bytes, tags, aprovees_hashes_bytes, addresses) {
    var ret = wasm.findTransactions(addHeapObject(bundle_hashes_bytes), addHeapObject(tags), addHeapObject(aprovees_hashes_bytes), addHeapObject(addresses));
    return takeObject(ret);
}

/**
* @param {any} addresses
* @param {any} tips_hashes_bytes
* @returns {any}
*/
export function getBalances(addresses, tips_hashes_bytes) {
    var ret = wasm.getBalances(addHeapObject(addresses), addHeapObject(tips_hashes_bytes));
    return takeObject(ret);
}

/**
* @param {any} hash_bytes
* @returns {any}
*/
export function getBundle(hash_bytes) {
    var ret = wasm.getBundle(addHeapObject(hash_bytes));
    return takeObject(ret);
}

/**
* @param {any} transaction_hashes_bytes
* @returns {any}
*/
export function getInclusionStates(transaction_hashes_bytes) {
    var ret = wasm.getInclusionStates(addHeapObject(transaction_hashes_bytes));
    return takeObject(ret);
}

/**
* @param {string} seed
* @param {number | undefined} index
* @param {number | undefined} security
* @param {number | undefined} threshold
* @returns {any}
*/
export function getInputs(seed, index, security, threshold) {
    var ptr0 = passStringToWasm0(seed, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.getInputs(ptr0, len0, !isLikeNone(index), isLikeNone(index) ? 0 : index, isLikeNone(security) ? 0xFFFFFF : security, !isLikeNone(threshold), isLikeNone(threshold) ? 0 : threshold);
    return takeObject(ret);
}

/**
* @param {any} transaction_hashes
* @returns {any}
*/
export function getLatestInclusion(transaction_hashes) {
    var ret = wasm.getLatestInclusion(addHeapObject(transaction_hashes));
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function getLatestSolidSubtangleMilestone() {
    var ret = wasm.getLatestSolidSubtangleMilestone();
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function getMissingTransactions() {
    var ret = wasm.getMissingTransactions();
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function getNeighbors() {
    var ret = wasm.getNeighbors();
    return takeObject(ret);
}

/**
* @param {string} seed
* @param {number | undefined} index
* @param {number | undefined} security
* @returns {any}
*/
export function getNewAddress(seed, index, security) {
    var ptr0 = passStringToWasm0(seed, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.getNewAddress(ptr0, len0, !isLikeNone(index), isLikeNone(index) ? 0 : index, isLikeNone(security) ? 0xFFFFFF : security);
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function getNodeApiConfiguration() {
    var ret = wasm.getNodeApiConfiguration();
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function getNodeInfo() {
    var ret = wasm.getNodeInfo();
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function getTips() {
    var ret = wasm.getTips();
    return takeObject(ret);
}

/**
* @param {number | undefined} depth
* @param {any} reference_hash_bytes
* @returns {any}
*/
export function getTransactionsToApprove(depth, reference_hash_bytes) {
    var ret = wasm.getTransactionsToApprove(isLikeNone(depth) ? 0xFFFFFF : depth, addHeapObject(reference_hash_bytes));
    return takeObject(ret);
}

/**
* @param {any} hash_bytes
* @returns {any}
*/
export function getTrytes(hash_bytes) {
    var ret = wasm.getTrytes(addHeapObject(hash_bytes));
    return takeObject(ret);
}

/**
* @returns {any}
*/
export function interruptAttachingToTangle() {
    var ret = wasm.interruptAttachingToTangle();
    return takeObject(ret);
}

/**
* @param {string} address
* @returns {any}
*/
export function isAddressUsed(address) {
    var ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.isAddressUsed(ptr0, len0);
    return takeObject(ret);
}

/**
* @param {any} tail_hash
* @returns {any}
*/
export function isPromotable(tail_hash) {
    var ret = wasm.isPromotable(addHeapObject(tail_hash));
    return takeObject(ret);
}

/**
* @param {string} seed
* @returns {any}
*/
export function prepareTransfers(seed) {
    var ptr0 = passStringToWasm0(seed, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.prepareTransfers(ptr0, len0);
    return takeObject(ret);
}

/**
* @param {any} uris
* @returns {any}
*/
export function removeNeighbors(uris) {
    var ret = wasm.removeNeighbors(addHeapObject(uris));
    return takeObject(ret);
}

/**
* @param {any} hash_bytes
* @param {number | undefined} depth
* @param {number | undefined} min_weight_magnitude
* @param {any} trytes
* @param {any} reference_hash_bytes
* @returns {any}
*/
export function replayBundle(hash_bytes, depth, min_weight_magnitude, trytes, reference_hash_bytes) {
    var ret = wasm.replayBundle(addHeapObject(hash_bytes), isLikeNone(depth) ? 0xFFFFFF : depth, isLikeNone(min_weight_magnitude) ? 0xFFFFFF : min_weight_magnitude, addHeapObject(trytes), addHeapObject(reference_hash_bytes));
    return takeObject(ret);
}

/**
* @param {string} seed
* @param {any} transfers
* @param {number | undefined} min_weight_magnitude
* @returns {any}
*/
export function sendTransfers(seed, transfers, min_weight_magnitude) {
    var ptr0 = passStringToWasm0(seed, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.sendTransfers(ptr0, len0, addHeapObject(transfers), isLikeNone(min_weight_magnitude) ? 0xFFFFFF : min_weight_magnitude);
    return takeObject(ret);
}

/**
* @param {any} trytes
* @returns {any}
*/
export function storeAndBroadcast(trytes) {
    var ret = wasm.storeAndBroadcast(addHeapObject(trytes));
    return takeObject(ret);
}

/**
* @param {any} trytes
* @returns {any}
*/
export function storeTransactions(trytes) {
    var ret = wasm.storeTransactions(addHeapObject(trytes));
    return takeObject(ret);
}

/**
* @param {any} hash_bytes
* @returns {any}
*/
export function traverseBundle(hash_bytes) {
    var ret = wasm.traverseBundle(addHeapObject(hash_bytes));
    return takeObject(ret);
}

function handleError(f) {
    return function () {
        try {
            return f.apply(this, arguments);

        } catch (e) {
            wasm.__wbindgen_exn_store(addHeapObject(e));
        }
    };
}
function __wbg_adapter_113(arg0, arg1, arg2, arg3) {
    wasm.wasm_bindgen__convert__closures__invoke2_mut__h600becb15453227d(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
}

/**
*/
export class NewAddress {

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_newaddress_free(ptr);
    }
    /**
    * @returns {number}
    */
    get index() {
        var ret = wasm.__wbg_get_newaddress_index(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set index(arg0) {
        wasm.__wbg_set_newaddress_index(this.ptr, arg0);
    }
    /**
    * @returns {string}
    */
    get address() {
        try {
            wasm.newaddress_address(8, this.ptr);
            var r0 = getInt32Memory0()[8 / 4 + 0];
            var r1 = getInt32Memory0()[8 / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
/**
*/
export class NewTransfer {

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_newtransfer_free(ptr);
    }
}
/**
*/
export class SentTransaction {

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_senttransaction_free(ptr);
    }
}

async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {

        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {

        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

async function init(input) {
    if (typeof input === 'undefined') {
        // input = import.meta.url.replace(/\.js$/, '_bg.wasm');
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
        takeObject(arg0);
    };
    imports.wbg.__wbindgen_cb_drop = function(arg0) {
        const obj = takeObject(arg0).original;
        if (obj.cnt-- == 1) {
            obj.a = 0;
            return true;
        }
        var ret = false;
        return ret;
    };
    imports.wbg.__wbindgen_json_parse = function(arg0, arg1) {
        var ret = JSON.parse(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_json_serialize = function(arg0, arg1) {
        const obj = getObject(arg1);
        var ret = JSON.stringify(obj === undefined ? null : obj);
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_is_falsy = function(arg0) {
        var ret = !getObject(arg0);
        return ret;
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        var ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_59cb74e423758ede = function() {
        var ret = new Error();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_stack_558ba5917b466edd = function(arg0, arg1) {
        var ret = getObject(arg1).stack;
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_error_4bb6c2a97407129a = function(arg0, arg1) {
        try {
            console.error(getStringFromWasm0(arg0, arg1));
        } finally {
            wasm.__wbindgen_free(arg0, arg1);
        }
    };
    imports.wbg.__wbg_instanceof_Window_17fdb5cd280d476d = function(arg0) {
        var ret = getObject(arg0) instanceof Window;
        return ret;
    };
    imports.wbg.__wbg_fetch_8047bcf6e8caf7db = function(arg0, arg1) {
        var ret = getObject(arg0).fetch(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Response_64fe4248a574e920 = function(arg0) {
        var ret = getObject(arg0) instanceof Response;
        return ret;
    };
    imports.wbg.__wbg_url_f587fb788a95e5f4 = function(arg0, arg1) {
        var ret = getObject(arg1).url;
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_status_5aa511c8aa1732bf = function(arg0) {
        var ret = getObject(arg0).status;
        return ret;
    };
    imports.wbg.__wbg_headers_9753444e56c26bcd = function(arg0) {
        var ret = getObject(arg0).headers;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_arrayBuffer_74898c32f31aed64 = handleError(function(arg0) {
        var ret = getObject(arg0).arrayBuffer();
        return addHeapObject(ret);
    });
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
        var ret = getObject(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithstrandinit_48a2ea56c3a4ef8e = handleError(function(arg0, arg1, arg2) {
        var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_new_d880804c2a502f2b = handleError(function() {
        var ret = new Headers();
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_append_40ec8ce4c7236944 = handleError(function(arg0, arg1, arg2, arg3, arg4) {
        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
    });
    imports.wbg.__wbindgen_is_function = function(arg0) {
        var ret = typeof(getObject(arg0)) === 'function';
        return ret;
    };
    imports.wbg.__wbindgen_is_object = function(arg0) {
        const val = getObject(arg0);
        var ret = typeof(val) === 'object' && val !== null;
        return ret;
    };
    imports.wbg.__wbg_next_3d6c9b2822b18fae = function(arg0) {
        var ret = getObject(arg0).next;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_d2c829783697bd8e = handleError(function(arg0) {
        var ret = getObject(arg0).next();
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_done_a16709ea72553788 = function(arg0) {
        var ret = getObject(arg0).done;
        return ret;
    };
    imports.wbg.__wbg_value_3093fb48085878da = function(arg0) {
        var ret = getObject(arg0).value;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_iterator_f89e8caf932523b1 = function() {
        var ret = Symbol.iterator;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_get_f2faf882de3801f1 = handleError(function(arg0, arg1) {
        var ret = Reflect.get(getObject(arg0), getObject(arg1));
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_call_1f85aaa5836dfb23 = handleError(function(arg0, arg1) {
        var ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_newnoargs_8aad4a6554f38345 = function(arg0, arg1) {
        var ret = new Function(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_call_0246f1c8ff252fb6 = handleError(function(arg0, arg1, arg2) {
        var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_getTime_d453e29d45a8e382 = function(arg0) {
        var ret = getObject(arg0).getTime();
        return ret;
    };
    imports.wbg.__wbg_new0_210d1cef1e5ccdd4 = function() {
        var ret = new Date();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_d6227c3c833572bb = function() {
        var ret = new Object();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_09f2ad087112acf0 = function(arg0, arg1) {
        try {
            var state0 = {a: arg0, b: arg1};
            var cb0 = (arg0, arg1) => {
                const a = state0.a;
                state0.a = 0;
                try {
                    return __wbg_adapter_113(a, state0.b, arg0, arg1);
                } finally {
                    state0.a = a;
                }
            };
            var ret = new Promise(cb0);
            return addHeapObject(ret);
        } finally {
            state0.a = state0.b = 0;
        }
    };
    imports.wbg.__wbg_resolve_708df7651c8929b8 = function(arg0) {
        var ret = Promise.resolve(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_8c23dce80c84c8fb = function(arg0, arg1) {
        var ret = getObject(arg0).then(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_300153bb889a5b4b = function(arg0, arg1, arg2) {
        var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_self_c0d3a5923e013647 = handleError(function() {
        var ret = self.self;
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_window_7ee6c8be3432927d = handleError(function() {
        var ret = window.window;
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_globalThis_c6de1d938e089cf0 = handleError(function() {
        var ret = globalThis.globalThis;
        return addHeapObject(ret);
    });
    imports.wbg.__wbg_global_c9a01ce4680907f8 = handleError(function() {
        var ret = global.global;
        return addHeapObject(ret);
    });
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
        var ret = getObject(arg0) === undefined;
        return ret;
    };
    imports.wbg.__wbg_buffer_eb5185aa4a8e9c62 = function(arg0) {
        var ret = getObject(arg0).buffer;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_772fe1865bed3e65 = function(arg0, arg1, arg2) {
        var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_length_2e324c9c0e74a81d = function(arg0) {
        var ret = getObject(arg0).length;
        return ret;
    };
    imports.wbg.__wbg_new_3d94e83f0a6bf252 = function(arg0) {
        var ret = new Uint8Array(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_d4d7629a896d4b3e = function(arg0, arg1, arg2) {
        getObject(arg0).set(getObject(arg1), arg2 >>> 0);
    };
    imports.wbg.__wbg_set_6a666216929b0387 = handleError(function(arg0, arg1, arg2) {
        var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
        return ret;
    });
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
        var ret = debugString(getObject(arg1));
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
        throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_rethrow = function(arg0) {
        throw takeObject(arg0);
    };
    imports.wbg.__wbindgen_memory = function() {
        var ret = wasm.memory;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper985 = function(arg0, arg1, arg2) {
        var ret = makeMutClosure(arg0, arg1, 260, __wbg_adapter_30);
        return addHeapObject(ret);
    };

    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
        input = fetch(input);
    }

    const { instance, module } = await load(await input, imports);

    wasm = instance.exports;
    init.__wbindgen_wasm_module = module;

    return wasm;
}

export default init;

