/**
 * Coordinates of a decoded Open Location Code.
 *
 * The coordinates include the latitude and longitude of the lower left and
 * upper right corners and the center of the bounding box for the area the
 * code represents.
 *
 * @constructor
 */
export declare class CodeArea {
    latitudeLo: any;
    longitudeLo: any;
    latitudeHi: any;
    longitudeHi: any;
    codeLength: any;
    /**
     * The latitude of the center in degrees.
     */
    latitudeCenter: number;
    /**
     * The longitude of the center in degrees.
     */
    longitudeCenter: number;
    constructor(latitudeLo: any, longitudeLo: any, latitudeHi: any, longitudeHi: any, codeLength: any);
    getLatitudeHeight(): number;
    getLongitudeWidth(): number;
}
/**
 * Open Location Code implementation for TypeScript
 */
export default class OpenLocationCode {
    code: string;
    constructor(code: string);
    getCode(): string;
    /**
     * Returns whether this {@link OpenLocationCode} is a padded Open Location Code, meaning that it
     * contains less than 8 valid digits.
     */
    isPadded(): boolean;
    private static readonly CODE_PRECISION_NORMAL;
    private static readonly CODE_PRECISION_EXTRA;
    private static readonly MAX_DIGIT_COUNT_;
    private static readonly SEPARATOR_;
    private static readonly SEPARATOR_POSITION_;
    private static readonly PADDING_CHARACTER_;
    private static readonly CODE_ALPHABET_;
    private static readonly ENCODING_BASE_;
    static readonly LATITUDE_MAX_ = 90;
    static readonly LONGITUDE_MAX_ = 180;
    private static readonly PAIR_CODE_LENGTH_;
    private static readonly PAIR_RESOLUTIONS_;
    private static readonly PAIR_FIRST_PLACE_VALUE_;
    private static readonly PAIR_PRECISION_;
    private static readonly GRID_CODE_LENGTH_;
    private static readonly GRID_COLUMNS_;
    private static readonly GRID_ROWS_;
    private static readonly GRID_LAT_FIRST_PLACE_VALUE_;
    private static readonly GRID_LNG_FIRST_PLACE_VALUE_;
    private static readonly FINAL_LAT_PRECISION_;
    private static readonly FINAL_LNG_PRECISION_;
    private static readonly MIN_TRIMMABLE_CODE_LEN_;
    /**
     * Determines if a code is valid.
     *
     * To be valid, all characters must be from the Open Location Code character
     * set with at most one separator. The separator can be in any even-numbered
     * position up to the eighth digit.
     *
     * @param {string} code The string to check.
     * @return {boolean} True if the string is a valid code.
     */
    static isValid(code: string): boolean;
    /**
     * Returns whether the provided Open Location Code is a padded Open Location Code, meaning that it
     * contains less than 8 valid digits.
     */
    static isPadded(code: string): boolean;
    /**
     * Determines if a code is a valid short code.
     *
     * @param {string} code The string to check.
     * @return {boolean} True if the string can be produced by removing four or
     *     more characters from the start of a valid code.
     */
    static isShort(code: string): boolean;
    /**
     * Determines if a code is a valid full Open Location Code.
     *
     * @param {string} code The string to check.
     * @return {boolean} True if the code represents a valid latitude and longitude combination.
     */
    static isFull(code: string): boolean;
    contains(latitude: number, longitude: number): boolean;
    /**
     * Encode a location into an Open Location Code.
     *
     * @param {number} latitude The latitude in signed decimal degrees. It will
     *     be clipped to the range -90 to 90.
     * @param {number} longitude The longitude in signed decimal degrees. Will be
     *     normalised to the range -180 to 180.
     * @param {?number} codeLength The length of the code to generate. If
     *     omitted, the value OpenLocationCode.CODE_PRECISION_NORMAL will be used.
     *     For a more precise result, OpenLocationCode.CODE_PRECISION_EXTRA is
     *     recommended.
     * @return {string} The code.
     * @throws {Exception} if any of the input values are not numbers.
     */
    static encode(latitude: number, longitude: number, codeLength?: number): string;
    /**
     * Decodes an Open Location Code into its location coordinates.
     *
     * Returns a CodeArea object that includes the coordinates of the bounding
     * box - the lower left, center and upper right.
     *
     * @param {string} code The code to decode.
     * @return {CodeArea} An object with the coordinates of the
     *     area of the code.
     * @throws {Exception} If the code is not valid.
     */
    static decode(code: string): CodeArea;
    /**
     * Recover the nearest matching code to a specified location.
     *
     * Given a valid short Open Location Code this recovers the nearest matching
     * full code to the specified location.
     *
     * @param {string} shortCode A valid short code.
     * @param {number} latitude The latitude to use for the reference
     *     location.
     * @param {number} longitude The longitude to use for the reference
     *     location.
     * @return {string} The nearest matching full code to the reference location.
     * @throws {Exception} if the short code is not valid, or the reference
     *     position values are not numbers.
     */
    static recoverNearest(shortCode: string, latitude: number, longitude: number): string;
    /**
     * Remove characters from the start of an OLC code.
     *
     * This uses a reference location to determine how many initial characters
     * can be removed from the OLC code. The number of characters that can be
     * removed depends on the distance between the code center and the reference
     * location.
     *
     * @param {string} code The full code to shorten.
     * @param {number} latitude The latitude to use for the reference location.
     * @param {number} longitude The longitude to use for the reference location.
     * @return {string} The code, shortened as much as possible that it is still
     *     the closest matching code to the reference location.
     * @throws {Exception} if the passed code is not a valid full code or the
     *     reference location values are not numbers.
     */
    static shorten(code: string, latitude: number, longitude: number): string;
    /**
     * Clip a latitude into the range -90 to 90.
     *
     * @param {number} latitude
     * @return {number} The latitude value clipped to be in the range.
     */
    private static clipLatitude;
    /**
     * Compute the latitude precision value for a given code length.
     * Lengths <= 10 have the same precision for latitude and longitude, but
     * lengths > 10 have different precisions due to the grid method having
     * fewer columns than rows.
     * @param {number} codeLength
     * @return {number} The latitude precision in degrees.
     */
    private static computeLatitudePrecision;
    /**
     * Normalize a longitude into the range -180 to 180, not including 180.
     *
     * @param {number} longitude
     * @return {number} Normalized into the range -180 to 180.
     */
    private static normalizeLongitude;
}
